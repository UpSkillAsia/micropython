# Port & Dev to MicroPython by Sonthaya Nongnuch

from time import sleep
from machine import Pin
from neopixel import NeoPixel

font_pendolino3 = bytes([
    0x0, 0x0, 0x0, 0x0, 0x0, 
    0x8, 0x8, 0x8, 0x0, 0x8, 
    0xa, 0x4a, 0x40, 0x0, 0x0, 
    0xa, 0x5f, 0xea, 0x5f, 0xea, 
    0xe, 0xd9, 0x2e, 0xd3, 0x6e, 
    0x19, 0x32, 0x44, 0x89, 0x33, 
    0xc, 0x92, 0x4c, 0x92, 0x4d, 
    0x8, 0x8, 0x0, 0x0, 0x0, 
    0x4, 0x88, 0x8, 0x8, 0x4, 
    0x8, 0x4, 0x84, 0x84, 0x88, 
    0x0, 0xa, 0x44, 0x8a, 0x40, 
    0x0, 0x4, 0x8e, 0xc4, 0x80, 
    0x0, 0x0, 0x0, 0x4, 0x88, 
    0x0, 0x0, 0xe, 0xc0, 0x0, 
    0x0, 0x0, 0x0, 0x8, 0x0, 
    0x1, 0x22, 0x44, 0x88, 0x10, 
    0xc, 0x92, 0x52, 0x52, 0x4c, 
    0x4, 0x8c, 0x84, 0x84, 0x8e, 
    0x1c, 0x82, 0x4c, 0x90, 0x1e, 
    0x1e, 0xc2, 0x44, 0x92, 0x4c, 
    0x6, 0xca, 0x52, 0x5f, 0xe2, 
    0x1f, 0xf0, 0x1e, 0xc1, 0x3e, 
    0x2, 0x44, 0x8e, 0xd1, 0x2e, 
    0x1f, 0xe2, 0x44, 0x88, 0x10, 
    0xe, 0xd1, 0x2e, 0xd1, 0x2e, 
    0xe, 0xd1, 0x2e, 0xc4, 0x88, 
    0x0, 0x8, 0x0, 0x8, 0x0, 
    0x0, 0x4, 0x80, 0x4, 0x88, 
    0x2, 0x44, 0x88, 0x4, 0x82, 
    0x0, 0xe, 0xc0, 0xe, 0xc0, 
    0x8, 0x4, 0x82, 0x44, 0x88, 
    0xe, 0xd1, 0x26, 0xc0, 0x4, 
    0xe, 0xd1, 0x35, 0xb3, 0x6c, 
    0xc, 0x92, 0x5e, 0xd2, 0x52, 
    0x1c, 0x92, 0x5c, 0x92, 0x5c, 
    0xe, 0xd0, 0x10, 0x10, 0xe, 
    0x1c, 0x92, 0x52, 0x52, 0x5c, 
    0x1e, 0xd0, 0x1c, 0x90, 0x1e, 
    0x1e, 0xd0, 0x1c, 0x90, 0x10, 
    0xe, 0xd0, 0x13, 0x71, 0x2e, 
    0x12, 0x52, 0x5e, 0xd2, 0x52, 
    0x1c, 0x88, 0x8, 0x8, 0x1c, 
    0x1f, 0xe2, 0x42, 0x52, 0x4c, 
    0x12, 0x54, 0x98, 0x14, 0x92, 
    0x10, 0x10, 0x10, 0x10, 0x1e, 
    0x11, 0x3b, 0x75, 0xb1, 0x31, 
    0x11, 0x39, 0x35, 0xb3, 0x71, 
    0xc, 0x92, 0x52, 0x52, 0x4c, 
    0x1c, 0x92, 0x5c, 0x90, 0x10, 
    0xc, 0x92, 0x52, 0x4c, 0x86, 
    0x1c, 0x92, 0x5c, 0x92, 0x51, 
    0xe, 0xd0, 0xc, 0x82, 0x5c, 
    0x1f, 0xe4, 0x84, 0x84, 0x84, 
    0x12, 0x52, 0x52, 0x52, 0x4c, 
    0x11, 0x31, 0x31, 0x2a, 0x44, 
    0x11, 0x31, 0x35, 0xbb, 0x71, 
    0x12, 0x52, 0x4c, 0x92, 0x52, 
    0x11, 0x2a, 0x44, 0x84, 0x84, 
    0x1e, 0xc4, 0x88, 0x10, 0x1e, 
    0xe, 0xc8, 0x8, 0x8, 0xe, 
    0x10, 0x8, 0x4, 0x82, 0x41, 
    0xe, 0xc2, 0x42, 0x42, 0x4e, 
    0x4, 0x8a, 0x40, 0x0, 0x0, 
    0x0, 0x0, 0x0, 0x0, 0x1f, 
    0x8, 0x4, 0x80, 0x0, 0x0, 
    0x0, 0xe, 0xd2, 0x52, 0x4f, 
    0x10, 0x10, 0x1c, 0x92, 0x5c, 
    0x0, 0xe, 0xd0, 0x10, 0xe, 
    0x2, 0x42, 0x4e, 0xd2, 0x4e, 
    0xc, 0x92, 0x5c, 0x90, 0xe, 
    0x6, 0xc8, 0x1c, 0x88, 0x8, 
    0xe, 0xd2, 0x4e, 0xc2, 0x4c, 
    0x10, 0x10, 0x1c, 0x92, 0x52, 
    0x8, 0x0, 0x8, 0x8, 0x8, 
    0x2, 0x40, 0x2, 0x42, 0x4c, 
    0x10, 0x14, 0x98, 0x14, 0x92, 
    0x8, 0x8, 0x8, 0x8, 0x6, 
    0x0, 0x1b, 0x75, 0xb1, 0x31, 
    0x0, 0x1c, 0x92, 0x52, 0x52, 
    0x0, 0xc, 0x92, 0x52, 0x4c, 
    0x0, 0x1c, 0x92, 0x5c, 0x90, 
    0x0, 0xe, 0xd2, 0x4e, 0xc2, 
    0x0, 0xe, 0xd0, 0x10, 0x10, 
    0x0, 0x6, 0xc8, 0x4, 0x98, 
    0x8, 0x8, 0xe, 0xc8, 0x7, 
    0x0, 0x12, 0x52, 0x52, 0x4f, 
    0x0, 0x11, 0x31, 0x2a, 0x44, 
    0x0, 0x11, 0x31, 0x35, 0xbb, 
    0x0, 0x12, 0x4c, 0x8c, 0x92, 
    0x0, 0x11, 0x2a, 0x44, 0x98, 
    0x0, 0x1e, 0xc4, 0x88, 0x1e, 
    0x6, 0xc4, 0x8c, 0x84, 0x86, 
    0x8, 0x8, 0x8, 0x8, 0x8, 
    0x18, 0x8, 0xc, 0x88, 0x18, 
    0x0, 0x0, 0xc, 0x83, 0x60
])

font4x8 = bytes([
    0x00, 0x7c, 0x44, 0x7c, # 0
    0x00, 0x00, 0x7c, 0x00, # 1
    0x00, 0x5c, 0x54, 0x74, # 2
    0x00, 0x54, 0x54, 0x7c, # 3
    0x00, 0x70, 0x10, 0x7c, # 4
    0x00, 0x74, 0x54, 0x5c, # 5
    0x00, 0x7c, 0x54, 0x5c, # 6
    0x00, 0x40, 0x40, 0x7c, # 7
    0x00, 0x7c, 0x54, 0x7c, # 8
    0x00, 0x74, 0x54, 0x7c, # 9
    0x00, 0x3c, 0x50, 0x3c, # A
    0x00, 0x7c, 0x54, 0x38, # B
    0x00, 0x38, 0x44, 0x44, # C
    0x00, 0x7c, 0x44, 0x38, # D
    0x00, 0x7c, 0x54, 0x54, # E
    0x00, 0x7c, 0x50, 0x50, # F
    0x00, 0x10, 0x10, 0x10, # -
    0x00, 0x00, 0x00, 0x00
])

np = NeoPixel(Pin(13, Pin.OUT), 25); 
np.bright = 10

def raw(data):
    i = 0
    for row in range(5):
        for col in range(5):
            np[i] = (255, 0, 0) if data[row] & (0x10 >> col) else (0, 0, 0)
            i = i + 1
    np.write()

# raw(b"\x11\xFF\xFF\xFF\xFF")

ASCII_START = const(32)
ASCII_END = const(126)

displayBuff = bytearray(b'\x00' * 5)

def show(value):
    global displayBuff
    value = str(value)
    value = bytearray(value)
    value = value[-1:] # limit only 1-char
    value = value[0]
    if value < ASCII_START or value > ASCII_END:
        value = bytearray(b"?")[0];
    offset = (value - ASCII_START) * 5;
    raw(font_pendolino3[offset:(offset + 5)])

# show("A")

def scroll(value, speed=0.06):
    value = str(value)
    value = bytearray(value)
    buffer = bytearray(5 + (len(value) * 5) + 5)
    for i in range(5):
        buffer[i] = 0
    for x in range(len(value)):
        for i in range(6):
            buffer[i + 5 + (x * 5)] = font_pendolino3[(((value[x] - ASCII_START) * 5) + i)]
    for i in range(5):
        buffer[5 + (len(value) * 5) + i] = 0
    for i in range(1 + len(value)):
        rawBuffer = bytearray(b'\x00' * 5)
        for x in range(5):
            for y in range(5):
                rawBuffer[y] = (buffer[(i * 5) + y] << x) & 0x1F | (buffer[((i + 1) * 5) + y] & 0x1F) >> (5 - x)
            raw(rawBuffer)
            sleep(speed)
    clear()

def clear():
    global displayBuff
    raw(b'\x00' * 5)
    displayBuff = bytearray(16)

def plot(value):
    global displayBuff
    for i in range(5):
        displayBuff[i] = (displayBuff[i] << 1) & 0x1F
    value = int(value)
    if value >= 0 and value <= 4:
        displayBuff[value] = displayBuff[value] | 0x01
    raw(displayBuff)

def dot(x, y, value):
    global displayBuff
    if value:
        displayBuff[y] = displayBuff[y] | (0x10 >> x)
    else:
        displayBuff[y] = displayBuff[y] & ((0x10 >> x) ^ 0x1F)
    raw(displayBuff)

clear()
